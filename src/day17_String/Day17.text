Day17.text

10/16/2020
Topics: String Intro and Review 

Package name: day17_String

Todays goals:
	- Introduction to String class
	- A few String methods
	- Review 

-----------------------------------
1) String class

	- Found in the java.lang package
			-> automatically imported

	- Strings are objects, not primitives 
		1) String literals
			String name = "Cybertek"
			-> Objects are stored in the String pool

		2) String using new
			String name = new String("Cybertek")	
			-> Objects are stored in the heap directly 

* Memory
	
	- heap: memory location where all objects are stored

	- String pool
		-> Its located in the heap
		-> It will store the literal objects --> It will same memory for objects that have similar values 
				-> There will be no duplicate values 

2)	String are immutable: The objects cannot be changed after creation.
	-> A reference/variable name can be resigned to point to a different object, but the original object is never changed

3) Index: position of each character from the String
	-> Index numbers always start from 0


* String methods

	How methods are used:
		stringObject.method()
	
	equals(): Compare the VALUES of two String, not their object locations like == would
		-> Never compare String with == anymore
		-> Accept a String in the parenthesis and if the values match between both, it will return true. If they don't it will return false

	equalsIgnoreCase(): works the same way as the equals method, but it does not case about the case sensitivity of characters. If all the characters match then the Strings are equal, returning true

	charAt(): Accept an index number and return back the character at that specific position
		-> datatype of the return value is char
		-> If any index is given, that doesn't exist you will get StringIndexOutOfBoundsException
		Ex: str.charAt(0)

	length(): It will return how many characters a String has

	toUpperCase(): This will convert the whole String to uppercase letters

	toLowerCase(): This will convert the whole String to lowercase letters 

-----------------------------------------------------------------

Scanner

	Purpose:
	-> If you just give variables with data right away. The values are fixed

	-> Scanner allows us to get data from outside of the code

	How do we use Scanner

		-> This class is found in a package --> You need to import the class
		-> It's found in the java.util package 

		-> Scanner scan = new Scanner(System.in); --> Scanner object, reference name is: scan
				-> Scanner object is in the heap

		-> Using the Scanner methods
				nextByte()
				nextShort()
				nextInt()
				nextLong()
				nextFloat()
				nextDouble()
				nextBoolean()

				next()  -> Will accept only one word (Each word is separate by a space)
				nextLine() -> Will accepts multiple words, but will take 'enter' inputs 

					-> Both return a String datatype

			- Note: Anytime you need to use a nextLine method after any of the other scanner methods, there needs to be an extra nextLine method call before the actual data is stored

				close() -> Closing Scanner object, which means no more methods can be used on it

Order in a java file:
PIC : Package -> Import -> Class


Import: needed to be able to use classes that are outside of the package

	packageName.className
	packageName.* -> Imports all of the classes in the package


Come back at 4:15 eastern

-----------------------------------------------------------------

- Place an order
    - Ask the user the enter the product name (String, multiple words)
    - Ask the user to enter the price (double)
    - Ask the user to enter the quantity(int)
    - Ask the user to enter their first name (String, single word)
    - Print in the following format: 
        "$firstName, your order for $quantity $productName has been placed. Your total is $totalCost(price * quantity)."
    Ex: 
        Input: "Apples" , 1.5, 5. "Luke"
        Output: Luke, your order for 5 Apples has been places. Your total is 7.5.

- Travel
    - Make a cost variable to calculate how much the person will owe after everything: 
    - Ask the user if they have a valid password (boolean)  
        > if the user enters true:
            The base cost of the ticket should be set to: 1000
            Ask the user the country they to travel to (String, multiple word)
            Ask the user how many bags they will take with them (byte)
                > Each bag will add 50 to the cost
            Ask the user how many people they will travel with (short)
                > For each person the cost is reduced by 100. Up to a limit of 300.
            Ask the user to Enter the name of the people they will travel with in one line, separating each name with a comma (String, multiple word)
            Print: "Your ticket is booked to $countryName. We have charged extra for the $numberOfBags bags but you are traveling with $peopleYouTravelWith so we are giving a discount. Your total cost is $costAmount"
        > if the user enters false: 
            The base cost of the passport renewal is: 200
            Ask the user when their passport expired(int)
                > Each year it was expired adds 75 to the cost
            Ask the user which countries they plan to travel it, written in one line, separating each country with a comma
            Ask the user if they will be traveling in the next year (String - yes or no) 
                > If yes: add 100 to the cost
                > If no: subtract 50 from the cost
            Print: "Looks like your password has been expired for $years, but not to worry we will get it ready for you to travel to $allCountries. Your total cost has come out to $costAmount." 

-----------------------------------------------------------------
Extra Tasks:

	1. write a program that ask user to enter sentence.
		then print out the first and last characters

	2. write a program to ask user to enter first name and last name
			then print the full name in all upper case

	3. write a program to ask use to enter first name and last name
			then print the initials (first letter of first name + first letter of last name)

	4. write a program that asks user to enter two string
			then print the longest string

	5. ask the user to enter two words. then add them together and print
			ex:
				input:
					one
					eight

				output:
					oneeight

					DO NOT use + operator					

	6. write a program to ask the user their age. Add 5 to their age and print: In 5 years you will be $newAge years old

	7. write a program that asks the user enter a three letter word. Check if the middle character of the given word is 'a'. In the case it is print: "Cool word", but in the case the middle letter is not 'a' print: "Okay word". 
	 - If the user does not enter a 3 letter word tell them: If the word is less than 3 letters: "Word is too short"
	 - If the word is too long: "Word is too long"

	8. write a program that asked the user to enter the number of babies they are having and print a message: 
		0: "Sorry"
		1: "Congratulations"
		2: "Wow Twins"
		3: "Wow. Triplets!"
		4, 5, 6: "Unbelievable, $umberOfBabies babies!"
		Any other: "I don't believe you"

	9. Ask the user enter an account number. Check if these account number is valid.
	> If the account number begins with a “2” the account number should be 7 characters long
	> If the account number begins with a “5” the account number should be 10 characters long

	—> If the account number does not begin with a 2 or a 5 OR the account number lengths do not meet the expected results print “Invalid account number”

